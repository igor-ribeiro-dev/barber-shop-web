openapi: 3.0.0
info:
  title: API Barbearia
  description: API para gerenciamento de agendamentos de barbearia
  version: 1.0.0

servers:
  - url: /api/v1
    description: Servidor de produção

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: "igor@mail.com"
        password:
          type: string
          minLength: 4
          example: "1234"

    LoginResponse:
      type: object
      properties:
        token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        user:
          $ref: '#/components/schemas/User'

    User:
      type: object
      properties:
        id:
          type: string
          example: "1"
        name:
          type: string
          example: "Igor"
        email:
          type: string
          format: email
          example: "igor@mail.com"

    Service:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
          example: "Corte de Cabelo"
        description:
          type: string
          example: "Corte masculino tradicional ou moderno"
        duration:
          type: integer
          minimum: 15
          example: 30
        price:
          type: number
          format: float
          minimum: 0
          example: 35.00
        category:
          type: string
          enum: [hair, beard, combo, treatment]
        image:
          type: string
          format: uri

    Professional:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        avatar:
          type: string
          format: uri
        specialties:
          type: array
          items:
            type: string
        services:
          type: array
          items:
            type: string
        bio:
          type: string
        rating:
          type: number
          format: float
          minimum: 0
          maximum: 5
        availability:
          type: object
          properties:
            start:
              type: string
              pattern: "^([0-1][0-9]|2[0-3]):[0-5][0-9]$"
            end:
              type: string
              pattern: "^([0-1][0-9]|2[0-3]):[0-5][0-9]$"
            daysOff:
              type: array
              items:
                type: integer
                minimum: 0
                maximum: 6

    Appointment:
      type: object
      required:
        - serviceId
        - professionalId
        - date
      properties:
        id:
          type: string
        customerId:
          type: string
        professionalId:
          type: string
        serviceId:
          type: string
        date:
          type: string
          format: date-time
        status:
          type: string
          enum: [scheduled, completed, cancelled]
        price:
          type: number
          format: float

    TimeSlot:
      type: object
      properties:
        time:
          type: string
          format: date-time
        available:
          type: boolean

paths:
  /auth/login:
    post:
      summary: Autenticar usuário
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login realizado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Credenciais inválidas

  /services:
    get:
      summary: Listar todos os serviços
      responses:
        '200':
          description: Lista de serviços
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Service'

  /services/{category}:
    get:
      summary: Listar serviços por categoria
      parameters:
        - name: category
          in: path
          required: true
          schema:
            type: string
            enum: [hair, beard, combo, treatment]
      responses:
        '200':
          description: Lista de serviços da categoria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Service'

  /professionals:
    get:
      summary: Listar todos os profissionais
      responses:
        '200':
          description: Lista de profissionais
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Professional'

  /professionals/service/{serviceId}:
    get:
      summary: Listar profissionais por serviço
      parameters:
        - name: serviceId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Lista de profissionais que realizam o serviço
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Professional'

  /professionals/{professionalId}/availability:
    get:
      summary: Verificar disponibilidade do profissional
      parameters:
        - name: professionalId
          in: path
          required: true
          schema:
            type: string
        - name: date
          in: query
          required: true
          schema:
            type: string
            format: date
        - name: serviceId
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Lista de horários disponíveis
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TimeSlot'

  /appointments:
    get:
      summary: Listar agendamentos do usuário
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Lista de agendamentos
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Appointment'
    post:
      summary: Criar novo agendamento
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Appointment'
      responses:
        '201':
          description: Agendamento criado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Appointment'
        '400':
          description: Dados inválidos
        '409':
          description: Horário indisponível

  /appointments/{appointmentId}:
    patch:
      summary: Atualizar status do agendamento
      security:
        - bearerAuth: []
      parameters:
        - name: appointmentId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - status
              properties:
                status:
                  type: string
                  enum: [scheduled, completed, cancelled]
      responses:
        '200':
          description: Status atualizado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Appointment'
        '404':
          description: Agendamento não encontrado